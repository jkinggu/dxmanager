package com.dx.dxmanage.handler;

import java.util.ArrayList;


import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.dx.dxmanage.po.Customer;
import com.dx.dxmanage.service.ICustomerService;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;

@Controller
@RequestMapping("customer")
public class CustomerHandler {
	@Resource
	private ICustomerService customerService;

	// 查询所有单位
	@RequestMapping("selectAllCustomer.dx")
	@ResponseBody
	public Map<String, Object> selectAllCustomer(int page, int limit, String membership, String codeOrName) {
		PageHelper.startPage(page, limit);
		PageInfo<Customer> pageInfo = null;
		Map<String, Object> map = new HashMap<>();
		try {

			if ("全部".equals(membership) || membership == null) {
				if ((codeOrName == null || "".equals(codeOrName))) {
					pageInfo = new PageInfo<Customer>(customerService.selectAllCustomer());
				} else {
					pageInfo = new PageInfo<Customer>(customerService.selectCustomerByCodeOrName(codeOrName));
				}
			} else {
				if ((codeOrName == null || "".equals(codeOrName))) {
					pageInfo = new PageInfo<Customer>(customerService.selectCustomerByMembership(membership));
				} else {
					pageInfo = new PageInfo<Customer>(
							customerService.selectCustomerByCodeOrNameAndMembership(codeOrName, membership));
				}
			}
			map.put("code", 0);
			map.put("msg", "汪登峰");
			map.put("count", pageInfo.getTotal());
			map.put("data", pageInfo.getList());
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return map;
	}

	// 根据主键客户id查询客户信息
	@RequestMapping("selectCustomerByCid.dx")
	@ResponseBody
	public Customer selectCustomer(String customerid) {
		int cid = Integer.parseInt(customerid);
		Customer customer = customerService.selectByCustomerid(cid);
		return customer;
	}

	// 根据主键客户id查询客户信息
	@RequestMapping("selectCustomerByCustomerid.dx")
	@ResponseBody
	public Customer selectCustomerByCustomerid(String customerid) {
		Customer customer = selectCustomer(customerid);
		return customer;
	}

	// 分级查询所有单位，建立树形菜单导航
	@RequestMapping("selectAllMembership.dx")
	@ResponseBody
	public Map<String, Object> selectAllMembership() {
		Map<String, Object> map = new HashMap<>();
		List<Customer> customerList1 = customerService.selectAllMembership();
		List<Customer> customerList2 = new ArrayList<Customer>();
		List<Customer> customerList3 = new ArrayList<Customer>();
		List<Customer> customerList4 = new ArrayList<Customer>();
		@SuppressWarnings("rawtypes")
		List<Map> list = new ArrayList<Map>();
		for (Customer customer : customerList1) {
			Map<String, Object> map1 = new HashMap<>();
			map1.put("name", customer.getMembership());
			map1.put("id", customer.getCustomerid());
			// map1.put("spread", true);
			customerList2 = customerService.selectDanwei2(customer.getMembership());
			@SuppressWarnings("rawtypes")
			List<Map> list2 = new ArrayList<Map>();
			for (Customer c2 : customerList2) {
				Map<String, Object> map2 = new HashMap<>();
				map2.put("name", c2.getCustomercode() + c2.getCustomername());
				map2.put("id", c2.getCustomerid());
				Map<String, String> paramMap3 = new HashMap<String, String>();
				paramMap3.put("membership", c2.getMembership());
				paramMap3.put("customercode", c2.getCustomercode());
				customerList3 = customerService.selectDanwei3(paramMap3);
				@SuppressWarnings("rawtypes")
				List<Map> list3 = new ArrayList<Map>();
				for (Customer c3 : customerList3) {
					Map<String, Object> map3 = new HashMap<>();
					map3.put("name", c3.getCustomercode() + c3.getCustomername());
					map3.put("id", c3.getCustomerid());
					Map<String, String> paramMap4 = new HashMap<String, String>();
					paramMap4.put("membership", c3.getMembership());
					paramMap4.put("customercode", c3.getCustomercode());
					customerList4 = customerService.selectDanwei4(paramMap4);
					@SuppressWarnings("rawtypes")
					List<Map> list4 = new ArrayList<Map>();
					for (Customer c4 : customerList4) {
						Map<String, Object> map4 = new HashMap<>();
						map4.put("name", c4.getCustomercode() + c4.getCustomername());
						map4.put("id", c4.getCustomerid());
						map4.put("children", "");
						list4.add(map4);
					}
					map3.put("children", list4);
					list3.add(map3);
				}
				map2.put("children", list3);
				list2.add(map2);
			}
			map1.put("children", list2);
			list.add(map1);
		}
		map.put("data", list);
		return map;
	}

	// 新增单位信息
	@RequestMapping("addCustomerinfo.dx")
	@ResponseBody
	public void addCustomerinfo(Customer customer) {
		customerService.insertSelective(customer);
	}
	
	//删除单位信息
	@RequestMapping("deleteByPrimaryKey.dx")
	@ResponseBody
	public Integer deleteByPrimaryKey(Integer customerid) {
		Integer a = 0;
		try {
			a = customerService.deleteByPrimaryKey(customerid);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return a;
		
	}
}
