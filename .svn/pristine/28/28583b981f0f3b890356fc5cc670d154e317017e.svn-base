package com.dx.dxmanage.handler;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.beans.propertyeditors.CustomNumberEditor;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.dx.dxmanage.po.Customer;
import com.dx.dxmanage.po.SP;
import com.dx.dxmanage.po.Sales;
import com.dx.dxmanage.po.Ticket;
import com.dx.dxmanage.service.ICustomerService;
import com.dx.dxmanage.service.ISPService;
import com.dx.dxmanage.service.ISalesService;
import com.dx.dxmanage.service.ITicketService;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;

@Controller
@RequestMapping("sales")
public class SalesHandler {
	@Resource
	private ISalesService salesService;
	@Resource
	private ITicketService ticketService;
	@Resource
	private ICustomerService customerService;
	@Resource
	private ISPService spService;

	// 查询所有客户购买商品情况
	@RequestMapping("selectAllSales.dx")
	@ResponseBody
	public Map<String, Object> selectAllSales(Integer page, Integer limit, String customerid,Boolean notGetMoney,Boolean haveTicket,String membership, String codeOrName) {
		Map<String, Object> resultMap = new HashMap<>();
		Map<String, Object> paramMap = new HashMap<>();
		PageHelper.startPage(page, limit);
		PageInfo<Sales> pageInfo = null;
		try {
			paramMap.put("customerid", customerid);
			paramMap.put("notGetMoney", notGetMoney);
			paramMap.put("haveTicket", haveTicket);
			paramMap.put("membership", membership);
			paramMap.put("codeOrName", codeOrName);
			pageInfo = new PageInfo<Sales>(salesService.selectAllSales(paramMap));
			resultMap.put("count", pageInfo.getTotal());
			resultMap.put("data", pageInfo.getList());
			resultMap.put("code", 0);
			resultMap.put("msg", "汪登峰");
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}

		return resultMap;
	}
	/**
	 * 根据客户id查询客户的销售记录
	 * */
	@RequestMapping("selectSalesByCid.dx")
	@ResponseBody
	public Map<String, Object> selectSalesByCid(Integer page, Integer limit, String customerid) {
		Map<String, Object> resultMap = new HashMap<>();
		Map<String, Object> paramMap = new HashMap<>();
		PageHelper.startPage(page, limit);
		PageInfo<Sales> pageInfo = null;
		try {
			paramMap.put("customerid", customerid);
			List<Sales> saleses = salesService.selectAllSales(paramMap);
			for(Sales s:saleses) {
				//查询此销售记录是否已经对账
				List<SP> sps = spService.selectSpsBySid(s.getSalesid());
				if(!sps.isEmpty()) {
					s.setNote("未对账");//用销售记录的note字段记录此销售是否对账
				}
			}
			pageInfo = new PageInfo<Sales>(saleses);
			resultMap.put("count", pageInfo.getTotal());
			resultMap.put("data", pageInfo.getList());
			resultMap.put("code", 0);
			resultMap.put("msg", "汪登峰");
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		
		return resultMap;
	}

	// 添加或更新销售信息
	@RequestMapping("addSalesInfo.dx")
	@ResponseBody
	public int addSalesinfo(Integer salesid, String salesdate, String ticketid,String ticketnum, String goodsid, Double amount,
			String receipt, String customerid, String payment, String linkman, String tel, String email,
			String paycredentials, String note) {
		Sales sales = new Sales();
		Ticket ticket = new Ticket();
		Customer customer = new Customer();
		Integer a = 0;
		try {
			sales.setSalesdate(salesdate);
			sales.setTicketnum(ticketnum);
			sales.setCustomerid(customerid);
			if (amount != null) {
				sales.setAmount(amount);
			}
			sales.setReceipt(receipt);
			sales.setGoodsid(goodsid);
			sales.setPayment(payment);
			sales.setLinkman(linkman);
			sales.setTel(tel);
			sales.setEmail(email);
			sales.setPaycredentials(paycredentials);
			sales.setNote(note);
			if (salesid == null) {
				a = salesService.addSales(sales);
				if(a==1) {
				//如果新增一条销售信息成功，则更新补充对应的客户联系人信息
					customer.setCustomerid(Integer.parseInt(customerid));
					customer.setAgent(linkman);
					customer.setMobile(tel);
					customer.setEmail(email);
					customerService.updateCustomer(customer);
				}
				/*if(a==1) {
				//如果新增一条销售信息成功，则更新对应的发票信息的usenum字段
					ticket.setUsenum(ticketnum);
					ticket.setTicketid(Integer.parseInt(ticketid));
					ticketService.updateTicket(ticket);
				}*/
			} else {
				sales.setSalesid(salesid);
				a = salesService.updateSales(sales);
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.getStackTrace();
		}

		return a;
	}
	
	// 查询所有客户购买商品情况
		@RequestMapping("selectNotTicketSales.dx")
		@ResponseBody
		public Map<String, Object> selectNotTicketSales(Integer page, Integer limit) {
			Map<String, Object> map = new HashMap<>();
			PageHelper.startPage(page, limit);
			PageInfo<Sales> pageInfo = null;
			try {
				
				pageInfo = new PageInfo<Sales>(salesService.selectNotTicketSales());
				map.put("count", pageInfo.getTotal());
				map.put("data", pageInfo.getList());
				map.put("code", 0);
				map.put("msg", "汪登峰");
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}

			return map;
		}
		
		//删除销售信息
		@RequestMapping("deleteSales.dx")
		@ResponseBody
		public Map<String, Object> deleteSales(@RequestParam(value = "salesIds[]") Integer[] salesIds) {
			Map<String, Object> resultMap = new HashMap<>();
			try {
				for(int sid:salesIds) {
					salesService.deleteByPrimaryKey(sid);
				}
				resultMap.put("code", 200);
				resultMap.put("msg", "成功删除 "+salesIds.length+" 条记录");
			} catch (Exception e) {
				resultMap.put("code", 400);
				resultMap.put("msg", "删除失败");
				e.printStackTrace();
			}
			return resultMap;
			
		}

}
